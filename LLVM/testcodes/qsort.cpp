// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("qsort.bc", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 43);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 ArrayType* ArrayTy_2 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 3);
 
 PointerType* PointerTy_3 = PointerType::get(ArrayTy_2, 0);
 
 ArrayType* ArrayTy_4 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 17);
 
 PointerType* PointerTy_5 = PointerType::get(ArrayTy_4, 0);
 
 ArrayType* ArrayTy_6 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 4);
 
 PointerType* PointerTy_7 = PointerType::get(ArrayTy_6, 0);
 
 StructType *StructTy_struct__IO_FILE = mod->getTypeByName("struct._IO_FILE");
 if (!StructTy_struct__IO_FILE) {
 StructTy_struct__IO_FILE = StructType::create(mod->getContext(), "struct._IO_FILE");
 }
 std::vector<Type*>StructTy_struct__IO_FILE_fields;
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 32));
 PointerType* PointerTy_10 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructType *StructTy_struct__IO_marker = mod->getTypeByName("struct._IO_marker");
 if (!StructTy_struct__IO_marker) {
 StructTy_struct__IO_marker = StructType::create(mod->getContext(), "struct._IO_marker");
 }
 std::vector<Type*>StructTy_struct__IO_marker_fields;
 PointerType* PointerTy_11 = PointerType::get(StructTy_struct__IO_marker, 0);
 
 StructTy_struct__IO_marker_fields.push_back(PointerTy_11);
 PointerType* PointerTy_9 = PointerType::get(StructTy_struct__IO_FILE, 0);
 
 StructTy_struct__IO_marker_fields.push_back(PointerTy_9);
 StructTy_struct__IO_marker_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct__IO_marker->isOpaque()) {
 StructTy_struct__IO_marker->setBody(StructTy_struct__IO_marker_fields, /*isPacked=*/false);
 }
 
 
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_11);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_9);
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 16));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 8));
 ArrayType* ArrayTy_12 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 1);
 
 StructTy_struct__IO_FILE_fields.push_back(ArrayTy_12);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_10);
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 32));
 ArrayType* ArrayTy_13 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 20);
 
 StructTy_struct__IO_FILE_fields.push_back(ArrayTy_13);
 if (StructTy_struct__IO_FILE->isOpaque()) {
 StructTy_struct__IO_FILE->setBody(StructTy_struct__IO_FILE_fields, /*isPacked=*/false);
 }
 
 
 PointerType* PointerTy_8 = PointerType::get(PointerTy_9, 0);
 
 ArrayType* ArrayTy_14 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 26);
 
 PointerType* PointerTy_15 = PointerType::get(ArrayTy_14, 0);
 
 std::vector<Type*>FuncTy_16_args;
 FunctionType* FuncTy_16 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_16_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_17 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 ArrayType* ArrayTy_19 = ArrayType::get(IntegerType::get(mod->getContext(), 32), 5);
 
 PointerType* PointerTy_18 = PointerType::get(ArrayTy_19, 0);
 
 std::vector<Type*>FuncTy_21_args;
 FuncTy_21_args.push_back(PointerTy_10);
 FunctionType* FuncTy_21 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_21_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_20 = PointerType::get(FuncTy_21, 0);
 
 std::vector<Type*>FuncTy_23_args;
 FuncTy_23_args.push_back(PointerTy_17);
 FuncTy_23_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_23_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_23 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_23_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_22 = PointerType::get(FuncTy_23, 0);
 
 PointerType* PointerTy_24 = PointerType::get(PointerTy_17, 0);
 
 std::vector<Type*>FuncTy_25_args;
 FuncTy_25_args.push_back(PointerTy_10);
 FunctionType* FuncTy_25 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_25_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_26 = PointerType::get(PointerTy_10, 0);
 
 std::vector<Type*>FuncTy_28_args;
 FuncTy_28_args.push_back(PointerTy_9);
 FuncTy_28_args.push_back(PointerTy_10);
 FunctionType* FuncTy_28 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_28_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_27 = PointerType::get(FuncTy_28, 0);
 
 std::vector<Type*>FuncTy_29_args;
 FuncTy_29_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_29 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_29_args,
  /*isVarArg=*/false);
 
 
 // Function Declarations
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_16,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_21,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 Function* func___isoc99_scanf = mod->getFunction("__isoc99_scanf");
 if (!func___isoc99_scanf) {
 func___isoc99_scanf = Function::Create(
  /*Type=*/FuncTy_21,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"__isoc99_scanf", mod); // (external, no body)
 func___isoc99_scanf->setCallingConv(CallingConv::C);
 }
 AttributeSet func___isoc99_scanf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func___isoc99_scanf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func___isoc99_scanf->setAttributes(func___isoc99_scanf_PAL);
 
 Function* func_qsort = mod->getFunction("qsort");
 if (!func_qsort) {
 func_qsort = Function::Create(
  /*Type=*/FuncTy_23,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"qsort", mod); 
 func_qsort->setCallingConv(CallingConv::C);
 }
 AttributeSet func_qsort_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_qsort_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_qsort->setAttributes(func_qsort_PAL);
 
 Function* func_swap = mod->getFunction("swap");
 if (!func_swap) {
 func_swap = Function::Create(
  /*Type=*/FuncTy_23,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"swap", mod); 
 func_swap->setCallingConv(CallingConv::C);
 }
 AttributeSet func_swap_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_swap_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_swap->setAttributes(func_swap_PAL);
 
 Function* func_log_msg = mod->getFunction("log_msg");
 if (!func_log_msg) {
 func_log_msg = Function::Create(
  /*Type=*/FuncTy_25,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"log_msg", mod); 
 func_log_msg->setCallingConv(CallingConv::C);
 }
 AttributeSet func_log_msg_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_log_msg_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_log_msg->setAttributes(func_log_msg_PAL);
 
 Function* func_fprintf = mod->getFunction("fprintf");
 if (!func_fprintf) {
 func_fprintf = Function::Create(
  /*Type=*/FuncTy_28,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"fprintf", mod); // (external, no body)
 func_fprintf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_fprintf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_fprintf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_fprintf->setAttributes(func_fprintf_PAL);
 
 Function* func_log_call_count = mod->getFunction("log_call_count");
 if (!func_log_call_count) {
 func_log_call_count = Function::Create(
  /*Type=*/FuncTy_29,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"log_call_count", mod); 
 func_log_call_count->setCallingConv(CallingConv::C);
 }
 AttributeSet func_log_call_count_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_log_call_count_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_log_call_count->setAttributes(func_log_call_count_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_2,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str1");
 gvar_array__str1->setAlignment(1);
 
 GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_4,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str2");
 gvar_array__str2->setAlignment(1);
 
 GlobalVariable* gvar_array__str3 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_6,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str3");
 gvar_array__str3->setAlignment(1);
 
 GlobalVariable* gvar_ptr_stderr = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/PointerTy_9,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, 
 /*Name=*/"stderr");
 
 GlobalVariable* gvar_array__str4 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_2,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str4");
 gvar_array__str4->setAlignment(1);
 
 GlobalVariable* gvar_array__str5 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_14,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str5");
 gvar_array__str5->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_30 = ConstantDataArray::getString(mod->getContext(), "Input 5 numbers delimited by Enter('\x5Cn'):\x0A", true);
 Constant *const_array_31 = ConstantDataArray::getString(mod->getContext(), "%d", true);
 Constant *const_array_32 = ConstantDataArray::getString(mod->getContext(), "sorted outputs:\x0A", true);
 Constant *const_array_33 = ConstantDataArray::getString(mod->getContext(), "%d\x0A", true);
 Constant *const_array_34 = ConstantDataArray::getString(mod->getContext(), "%s", true);
 Constant *const_array_35 = ConstantDataArray::getString(mod->getContext(), "CallInst called %d times\x0A", true);
 ConstantInt* const_int32_36 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_37 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 std::vector<Constant*> const_ptr_38_indices;
 const_ptr_38_indices.push_back(const_int32_37);
 const_ptr_38_indices.push_back(const_int32_37);
 Constant* const_ptr_38 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_38_indices);
 ConstantInt* const_int32_39 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("5"), 10));
 std::vector<Constant*> const_ptr_40_indices;
 const_ptr_40_indices.push_back(const_int32_37);
 const_ptr_40_indices.push_back(const_int32_37);
 Constant* const_ptr_40 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_40_indices);
 ConstantInt* const_int32_41 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("4"), 10));
 std::vector<Constant*> const_ptr_42_indices;
 const_ptr_42_indices.push_back(const_int32_37);
 const_ptr_42_indices.push_back(const_int32_37);
 Constant* const_ptr_42 = ConstantExpr::getGetElementPtr(gvar_array__str2, const_ptr_42_indices);
 std::vector<Constant*> const_ptr_43_indices;
 const_ptr_43_indices.push_back(const_int32_37);
 const_ptr_43_indices.push_back(const_int32_37);
 Constant* const_ptr_43 = ConstantExpr::getGetElementPtr(gvar_array__str3, const_ptr_43_indices);
 ConstantInt* const_int32_44 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
 std::vector<Constant*> const_ptr_45_indices;
 const_ptr_45_indices.push_back(const_int32_37);
 const_ptr_45_indices.push_back(const_int32_37);
 Constant* const_ptr_45 = ConstantExpr::getGetElementPtr(gvar_array__str4, const_ptr_45_indices);
 std::vector<Constant*> const_ptr_46_indices;
 const_ptr_46_indices.push_back(const_int32_37);
 const_ptr_46_indices.push_back(const_int32_37);
 Constant* const_ptr_46 = ConstantExpr::getGetElementPtr(gvar_array__str5, const_ptr_46_indices);
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_30);
 gvar_array__str1->setInitializer(const_array_31);
 gvar_array__str2->setInitializer(const_array_32);
 gvar_array__str3->setInitializer(const_array_33);
 gvar_array__str4->setInitializer(const_array_34);
 gvar_array__str5->setInitializer(const_array_35);
 
 // Function Definitions
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  BasicBlock* label_for_cond = BasicBlock::Create(mod->getContext(), "for.cond",func_main,0);
  BasicBlock* label_for_body = BasicBlock::Create(mod->getContext(), "for.body",func_main,0);
  BasicBlock* label_for_inc = BasicBlock::Create(mod->getContext(), "for.inc",func_main,0);
  BasicBlock* label_for_end = BasicBlock::Create(mod->getContext(), "for.end",func_main,0);
  BasicBlock* label_for_cond4 = BasicBlock::Create(mod->getContext(), "for.cond4",func_main,0);
  BasicBlock* label_for_body6 = BasicBlock::Create(mod->getContext(), "for.body6",func_main,0);
  BasicBlock* label_for_inc10 = BasicBlock::Create(mod->getContext(), "for.inc10",func_main,0);
  BasicBlock* label_for_end12 = BasicBlock::Create(mod->getContext(), "for.end12",func_main,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry);
  ptr_retval->setAlignment(4);
  AllocaInst* ptr_array = new AllocaInst(ArrayTy_19, "array", label_entry);
  ptr_array->setAlignment(16);
  AllocaInst* ptr_i = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_entry);
  ptr_i->setAlignment(4);
  AllocaInst* ptr_i3 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i3", label_entry);
  ptr_i3->setAlignment(4);
  StoreInst* void_47 = new StoreInst(const_int32_37, ptr_retval, false, label_entry);
  CallInst* int32_call = CallInst::Create(func_printf, const_ptr_38, "call", label_entry);
  int32_call->setCallingConv(CallingConv::C);
  int32_call->setTailCall(false);
  AttributeSet int32_call_PAL;
  int32_call->setAttributes(int32_call_PAL);
  
  StoreInst* void_48 = new StoreInst(const_int32_37, ptr_i, false, label_entry);
  void_48->setAlignment(4);
  BranchInst::Create(label_for_cond, label_entry);
  
  // Block for.cond (label_for_cond)
  LoadInst* int32_50 = new LoadInst(ptr_i, "", false, label_for_cond);
  int32_50->setAlignment(4);
  ICmpInst* int1_cmp = new ICmpInst(*label_for_cond, ICmpInst::ICMP_SLT, int32_50, const_int32_39, "cmp");
  BranchInst::Create(label_for_body, label_for_end, int1_cmp, label_for_cond);
  
  // Block for.body (label_for_body)
  LoadInst* int32_52 = new LoadInst(ptr_i, "", false, label_for_body);
  int32_52->setAlignment(4);
  CastInst* int64_idxprom = new SExtInst(int32_52, IntegerType::get(mod->getContext(), 64), "idxprom", label_for_body);
  std::vector<Value*> ptr_arrayidx_indices;
  ptr_arrayidx_indices.push_back(const_int32_37);
  ptr_arrayidx_indices.push_back(int64_idxprom);
  Instruction* ptr_arrayidx = GetElementPtrInst::Create(ptr_array, ptr_arrayidx_indices, "arrayidx", label_for_body);
  std::vector<Value*> int32_call1_params;
  int32_call1_params.push_back(const_ptr_40);
  int32_call1_params.push_back(ptr_arrayidx);
  CallInst* int32_call1 = CallInst::Create(func___isoc99_scanf, int32_call1_params, "call1", label_for_body);
  int32_call1->setCallingConv(CallingConv::C);
  int32_call1->setTailCall(false);
  AttributeSet int32_call1_PAL;
  int32_call1->setAttributes(int32_call1_PAL);
  
  BranchInst::Create(label_for_inc, label_for_body);
  
  // Block for.inc (label_for_inc)
  LoadInst* int32_54 = new LoadInst(ptr_i, "", false, label_for_inc);
  int32_54->setAlignment(4);
  BinaryOperator* int32_inc = BinaryOperator::Create(Instruction::Add, int32_54, const_int32_36, "inc", label_for_inc);
  StoreInst* void_55 = new StoreInst(int32_inc, ptr_i, false, label_for_inc);
  void_55->setAlignment(4);
  BranchInst::Create(label_for_cond, label_for_inc);
  
  // Block for.end (label_for_end)
  std::vector<Value*> ptr_arraydecay_indices;
  ptr_arraydecay_indices.push_back(const_int32_37);
  ptr_arraydecay_indices.push_back(const_int32_37);
  Instruction* ptr_arraydecay = GetElementPtrInst::Create(ptr_array, ptr_arraydecay_indices, "arraydecay", label_for_end);
  std::vector<Value*> void_57_params;
  void_57_params.push_back(ptr_arraydecay);
  void_57_params.push_back(const_int32_37);
  void_57_params.push_back(const_int32_41);
  CallInst* void_57 = CallInst::Create(func_qsort, void_57_params, "", label_for_end);
  void_57->setCallingConv(CallingConv::C);
  void_57->setTailCall(false);
  AttributeSet void_57_PAL;
  void_57->setAttributes(void_57_PAL);
  
  CallInst* int32_call2 = CallInst::Create(func_printf, const_ptr_42, "call2", label_for_end);
  int32_call2->setCallingConv(CallingConv::C);
  int32_call2->setTailCall(false);
  AttributeSet int32_call2_PAL;
  int32_call2->setAttributes(int32_call2_PAL);
  
  StoreInst* void_58 = new StoreInst(const_int32_37, ptr_i3, false, label_for_end);
  void_58->setAlignment(4);
  BranchInst::Create(label_for_cond4, label_for_end);
  
  // Block for.cond4 (label_for_cond4)
  LoadInst* int32_60 = new LoadInst(ptr_i3, "", false, label_for_cond4);
  int32_60->setAlignment(4);
  ICmpInst* int1_cmp5 = new ICmpInst(*label_for_cond4, ICmpInst::ICMP_SLT, int32_60, const_int32_39, "cmp5");
  BranchInst::Create(label_for_body6, label_for_end12, int1_cmp5, label_for_cond4);
  
  // Block for.body6 (label_for_body6)
  LoadInst* int32_62 = new LoadInst(ptr_i3, "", false, label_for_body6);
  int32_62->setAlignment(4);
  CastInst* int64_idxprom7 = new SExtInst(int32_62, IntegerType::get(mod->getContext(), 64), "idxprom7", label_for_body6);
  std::vector<Value*> ptr_arrayidx8_indices;
  ptr_arrayidx8_indices.push_back(const_int32_37);
  ptr_arrayidx8_indices.push_back(int64_idxprom7);
  Instruction* ptr_arrayidx8 = GetElementPtrInst::Create(ptr_array, ptr_arrayidx8_indices, "arrayidx8", label_for_body6);
  LoadInst* int32_63 = new LoadInst(ptr_arrayidx8, "", false, label_for_body6);
  int32_63->setAlignment(4);
  std::vector<Value*> int32_call9_params;
  int32_call9_params.push_back(const_ptr_43);
  int32_call9_params.push_back(int32_63);
  CallInst* int32_call9 = CallInst::Create(func_printf, int32_call9_params, "call9", label_for_body6);
  int32_call9->setCallingConv(CallingConv::C);
  int32_call9->setTailCall(false);
  AttributeSet int32_call9_PAL;
  int32_call9->setAttributes(int32_call9_PAL);
  
  BranchInst::Create(label_for_inc10, label_for_body6);
  
  // Block for.inc10 (label_for_inc10)
  LoadInst* int32_65 = new LoadInst(ptr_i3, "", false, label_for_inc10);
  int32_65->setAlignment(4);
  BinaryOperator* int32_inc11 = BinaryOperator::Create(Instruction::Add, int32_65, const_int32_36, "inc11", label_for_inc10);
  StoreInst* void_66 = new StoreInst(int32_inc11, ptr_i3, false, label_for_inc10);
  void_66->setAlignment(4);
  BranchInst::Create(label_for_cond4, label_for_inc10);
  
  // Block for.end12 (label_for_end12)
  ReturnInst::Create(mod->getContext(), const_int32_37, label_for_end12);
  
 }
 
 // Function: qsort (func_qsort)
 {
  Function::arg_iterator args = func_qsort->arg_begin();
  Value* ptr_a = args++;
  ptr_a->setName("a");
  Value* int32_left = args++;
  int32_left->setName("left");
  Value* int32_right = args++;
  int32_right->setName("right");
  
  BasicBlock* label_entry_69 = BasicBlock::Create(mod->getContext(), "entry",func_qsort,0);
  BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_qsort,0);
  BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_qsort,0);
  BasicBlock* label_for_cond_70 = BasicBlock::Create(mod->getContext(), "for.cond",func_qsort,0);
  BasicBlock* label_for_body_71 = BasicBlock::Create(mod->getContext(), "for.body",func_qsort,0);
  BasicBlock* label_if_then6 = BasicBlock::Create(mod->getContext(), "if.then6",func_qsort,0);
  BasicBlock* label_if_end7 = BasicBlock::Create(mod->getContext(), "if.end7",func_qsort,0);
  BasicBlock* label_for_inc_72 = BasicBlock::Create(mod->getContext(), "for.inc",func_qsort,0);
  BasicBlock* label_for_end_73 = BasicBlock::Create(mod->getContext(), "for.end",func_qsort,0);
  BasicBlock* label_return = BasicBlock::Create(mod->getContext(), "return",func_qsort,0);
  
  // Block entry (label_entry_69)
  AllocaInst* ptr_a_addr = new AllocaInst(PointerTy_17, "a.addr", label_entry_69);
  ptr_a_addr->setAlignment(8);
  AllocaInst* ptr_left_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "left.addr", label_entry_69);
  ptr_left_addr->setAlignment(4);
  AllocaInst* ptr_right_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "right.addr", label_entry_69);
  ptr_right_addr->setAlignment(4);
  AllocaInst* ptr_i_74 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_entry_69);
  ptr_i_74->setAlignment(4);
  AllocaInst* ptr_last = new AllocaInst(IntegerType::get(mod->getContext(), 32), "last", label_entry_69);
  ptr_last->setAlignment(4);
  StoreInst* void_75 = new StoreInst(ptr_a, ptr_a_addr, false, label_entry_69);
  void_75->setAlignment(8);
  StoreInst* void_76 = new StoreInst(int32_left, ptr_left_addr, false, label_entry_69);
  void_76->setAlignment(4);
  StoreInst* void_77 = new StoreInst(int32_right, ptr_right_addr, false, label_entry_69);
  void_77->setAlignment(4);
  LoadInst* int32_78 = new LoadInst(ptr_left_addr, "", false, label_entry_69);
  int32_78->setAlignment(4);
  LoadInst* int32_79 = new LoadInst(ptr_right_addr, "", false, label_entry_69);
  int32_79->setAlignment(4);
  ICmpInst* int1_cmp_80 = new ICmpInst(*label_entry_69, ICmpInst::ICMP_SGE, int32_78, int32_79, "cmp");
  BranchInst::Create(label_if_then, label_if_end, int1_cmp_80, label_entry_69);
  
  // Block if.then (label_if_then)
  BranchInst::Create(label_return, label_if_then);
  
  // Block if.end (label_if_end)
  LoadInst* ptr_83 = new LoadInst(ptr_a_addr, "", false, label_if_end);
  ptr_83->setAlignment(8);
  LoadInst* int32_84 = new LoadInst(ptr_left_addr, "", false, label_if_end);
  int32_84->setAlignment(4);
  LoadInst* int32_85 = new LoadInst(ptr_left_addr, "", false, label_if_end);
  int32_85->setAlignment(4);
  LoadInst* int32_86 = new LoadInst(ptr_right_addr, "", false, label_if_end);
  int32_86->setAlignment(4);
  BinaryOperator* int32_add = BinaryOperator::Create(Instruction::Add, int32_85, int32_86, "add", label_if_end);
  BinaryOperator* int32_div = BinaryOperator::Create(Instruction::SDiv, int32_add, const_int32_44, "div", label_if_end);
  std::vector<Value*> void_87_params;
  void_87_params.push_back(ptr_83);
  void_87_params.push_back(int32_84);
  void_87_params.push_back(int32_div);
  CallInst* void_87 = CallInst::Create(func_swap, void_87_params, "", label_if_end);
  void_87->setCallingConv(CallingConv::C);
  void_87->setTailCall(false);
  AttributeSet void_87_PAL;
  void_87->setAttributes(void_87_PAL);
  
  LoadInst* int32_88 = new LoadInst(ptr_left_addr, "", false, label_if_end);
  int32_88->setAlignment(4);
  StoreInst* void_89 = new StoreInst(int32_88, ptr_last, false, label_if_end);
  void_89->setAlignment(4);
  LoadInst* int32_90 = new LoadInst(ptr_left_addr, "", false, label_if_end);
  int32_90->setAlignment(4);
  BinaryOperator* int32_add1 = BinaryOperator::Create(Instruction::Add, int32_90, const_int32_36, "add1", label_if_end);
  StoreInst* void_91 = new StoreInst(int32_add1, ptr_i_74, false, label_if_end);
  void_91->setAlignment(4);
  BranchInst::Create(label_for_cond_70, label_if_end);
  
  // Block for.cond (label_for_cond_70)
  LoadInst* int32_93 = new LoadInst(ptr_i_74, "", false, label_for_cond_70);
  int32_93->setAlignment(4);
  LoadInst* int32_94 = new LoadInst(ptr_right_addr, "", false, label_for_cond_70);
  int32_94->setAlignment(4);
  ICmpInst* int1_cmp2 = new ICmpInst(*label_for_cond_70, ICmpInst::ICMP_SLE, int32_93, int32_94, "cmp2");
  BranchInst::Create(label_for_body_71, label_for_end_73, int1_cmp2, label_for_cond_70);
  
  // Block for.body (label_for_body_71)
  LoadInst* int32_96 = new LoadInst(ptr_i_74, "", false, label_for_body_71);
  int32_96->setAlignment(4);
  CastInst* int64_idxprom_97 = new SExtInst(int32_96, IntegerType::get(mod->getContext(), 64), "idxprom", label_for_body_71);
  LoadInst* ptr_98 = new LoadInst(ptr_a_addr, "", false, label_for_body_71);
  ptr_98->setAlignment(8);
  GetElementPtrInst* ptr_arrayidx_99 = GetElementPtrInst::Create(ptr_98, int64_idxprom_97, "arrayidx", label_for_body_71);
  LoadInst* int32_100 = new LoadInst(ptr_arrayidx_99, "", false, label_for_body_71);
  int32_100->setAlignment(4);
  LoadInst* int32_101 = new LoadInst(ptr_left_addr, "", false, label_for_body_71);
  int32_101->setAlignment(4);
  CastInst* int64_idxprom3 = new SExtInst(int32_101, IntegerType::get(mod->getContext(), 64), "idxprom3", label_for_body_71);
  LoadInst* ptr_102 = new LoadInst(ptr_a_addr, "", false, label_for_body_71);
  ptr_102->setAlignment(8);
  GetElementPtrInst* ptr_arrayidx4 = GetElementPtrInst::Create(ptr_102, int64_idxprom3, "arrayidx4", label_for_body_71);
  LoadInst* int32_103 = new LoadInst(ptr_arrayidx4, "", false, label_for_body_71);
  int32_103->setAlignment(4);
  ICmpInst* int1_cmp5_104 = new ICmpInst(*label_for_body_71, ICmpInst::ICMP_SLT, int32_100, int32_103, "cmp5");
  BranchInst::Create(label_if_then6, label_if_end7, int1_cmp5_104, label_for_body_71);
  
  // Block if.then6 (label_if_then6)
  LoadInst* ptr_106 = new LoadInst(ptr_a_addr, "", false, label_if_then6);
  ptr_106->setAlignment(8);
  LoadInst* int32_107 = new LoadInst(ptr_last, "", false, label_if_then6);
  int32_107->setAlignment(4);
  BinaryOperator* int32_inc_108 = BinaryOperator::Create(Instruction::Add, int32_107, const_int32_36, "inc", label_if_then6);
  StoreInst* void_109 = new StoreInst(int32_inc_108, ptr_last, false, label_if_then6);
  void_109->setAlignment(4);
  LoadInst* int32_110 = new LoadInst(ptr_i_74, "", false, label_if_then6);
  int32_110->setAlignment(4);
  std::vector<Value*> void_111_params;
  void_111_params.push_back(ptr_106);
  void_111_params.push_back(int32_inc_108);
  void_111_params.push_back(int32_110);
  CallInst* void_111 = CallInst::Create(func_swap, void_111_params, "", label_if_then6);
  void_111->setCallingConv(CallingConv::C);
  void_111->setTailCall(false);
  AttributeSet void_111_PAL;
  void_111->setAttributes(void_111_PAL);
  
  BranchInst::Create(label_if_end7, label_if_then6);
  
  // Block if.end7 (label_if_end7)
  BranchInst::Create(label_for_inc_72, label_if_end7);
  
  // Block for.inc (label_for_inc_72)
  LoadInst* int32_114 = new LoadInst(ptr_i_74, "", false, label_for_inc_72);
  int32_114->setAlignment(4);
  BinaryOperator* int32_inc8 = BinaryOperator::Create(Instruction::Add, int32_114, const_int32_36, "inc8", label_for_inc_72);
  StoreInst* void_115 = new StoreInst(int32_inc8, ptr_i_74, false, label_for_inc_72);
  void_115->setAlignment(4);
  BranchInst::Create(label_for_cond_70, label_for_inc_72);
  
  // Block for.end (label_for_end_73)
  LoadInst* ptr_117 = new LoadInst(ptr_a_addr, "", false, label_for_end_73);
  ptr_117->setAlignment(8);
  LoadInst* int32_118 = new LoadInst(ptr_last, "", false, label_for_end_73);
  int32_118->setAlignment(4);
  LoadInst* int32_119 = new LoadInst(ptr_left_addr, "", false, label_for_end_73);
  int32_119->setAlignment(4);
  std::vector<Value*> void_120_params;
  void_120_params.push_back(ptr_117);
  void_120_params.push_back(int32_118);
  void_120_params.push_back(int32_119);
  CallInst* void_120 = CallInst::Create(func_swap, void_120_params, "", label_for_end_73);
  void_120->setCallingConv(CallingConv::C);
  void_120->setTailCall(false);
  AttributeSet void_120_PAL;
  void_120->setAttributes(void_120_PAL);
  
  LoadInst* ptr_121 = new LoadInst(ptr_a_addr, "", false, label_for_end_73);
  ptr_121->setAlignment(8);
  LoadInst* int32_122 = new LoadInst(ptr_left_addr, "", false, label_for_end_73);
  int32_122->setAlignment(4);
  LoadInst* int32_123 = new LoadInst(ptr_last, "", false, label_for_end_73);
  int32_123->setAlignment(4);
  BinaryOperator* int32_sub = BinaryOperator::Create(Instruction::Sub, int32_123, const_int32_36, "sub", label_for_end_73);
  std::vector<Value*> void_124_params;
  void_124_params.push_back(ptr_121);
  void_124_params.push_back(int32_122);
  void_124_params.push_back(int32_sub);
  CallInst* void_124 = CallInst::Create(func_qsort, void_124_params, "", label_for_end_73);
  void_124->setCallingConv(CallingConv::C);
  void_124->setTailCall(false);
  AttributeSet void_124_PAL;
  void_124->setAttributes(void_124_PAL);
  
  LoadInst* ptr_125 = new LoadInst(ptr_a_addr, "", false, label_for_end_73);
  ptr_125->setAlignment(8);
  LoadInst* int32_126 = new LoadInst(ptr_last, "", false, label_for_end_73);
  int32_126->setAlignment(4);
  BinaryOperator* int32_add9 = BinaryOperator::Create(Instruction::Add, const_int32_36, int32_126, "add9", label_for_end_73);
  LoadInst* int32_127 = new LoadInst(ptr_right_addr, "", false, label_for_end_73);
  int32_127->setAlignment(4);
  std::vector<Value*> void_128_params;
  void_128_params.push_back(ptr_125);
  void_128_params.push_back(int32_add9);
  void_128_params.push_back(int32_127);
  CallInst* void_128 = CallInst::Create(func_qsort, void_128_params, "", label_for_end_73);
  void_128->setCallingConv(CallingConv::C);
  void_128->setTailCall(false);
  AttributeSet void_128_PAL;
  void_128->setAttributes(void_128_PAL);
  
  BranchInst::Create(label_return, label_for_end_73);
  
  // Block return (label_return)
  ReturnInst::Create(mod->getContext(), label_return);
  
 }
 
 // Function: swap (func_swap)
 {
  Function::arg_iterator args = func_swap->arg_begin();
  Value* ptr_v = args++;
  ptr_v->setName("v");
  Value* int32_i = args++;
  int32_i->setName("i");
  Value* int32_j = args++;
  int32_j->setName("j");
  
  BasicBlock* label_entry_131 = BasicBlock::Create(mod->getContext(), "entry",func_swap,0);
  
  // Block entry (label_entry_131)
  AllocaInst* ptr_v_addr = new AllocaInst(PointerTy_17, "v.addr", label_entry_131);
  ptr_v_addr->setAlignment(8);
  AllocaInst* ptr_i_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i.addr", label_entry_131);
  ptr_i_addr->setAlignment(4);
  AllocaInst* ptr_j_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "j.addr", label_entry_131);
  ptr_j_addr->setAlignment(4);
  AllocaInst* ptr_temp = new AllocaInst(IntegerType::get(mod->getContext(), 32), "temp", label_entry_131);
  ptr_temp->setAlignment(4);
  StoreInst* void_132 = new StoreInst(ptr_v, ptr_v_addr, false, label_entry_131);
  void_132->setAlignment(8);
  StoreInst* void_133 = new StoreInst(int32_i, ptr_i_addr, false, label_entry_131);
  void_133->setAlignment(4);
  StoreInst* void_134 = new StoreInst(int32_j, ptr_j_addr, false, label_entry_131);
  void_134->setAlignment(4);
  LoadInst* int32_135 = new LoadInst(ptr_i_addr, "", false, label_entry_131);
  int32_135->setAlignment(4);
  CastInst* int64_idxprom_136 = new SExtInst(int32_135, IntegerType::get(mod->getContext(), 64), "idxprom", label_entry_131);
  LoadInst* ptr_137 = new LoadInst(ptr_v_addr, "", false, label_entry_131);
  ptr_137->setAlignment(8);
  GetElementPtrInst* ptr_arrayidx_138 = GetElementPtrInst::Create(ptr_137, int64_idxprom_136, "arrayidx", label_entry_131);
  LoadInst* int32_139 = new LoadInst(ptr_arrayidx_138, "", false, label_entry_131);
  int32_139->setAlignment(4);
  StoreInst* void_140 = new StoreInst(int32_139, ptr_temp, false, label_entry_131);
  void_140->setAlignment(4);
  LoadInst* int32_141 = new LoadInst(ptr_j_addr, "", false, label_entry_131);
  int32_141->setAlignment(4);
  CastInst* int64_idxprom1 = new SExtInst(int32_141, IntegerType::get(mod->getContext(), 64), "idxprom1", label_entry_131);
  LoadInst* ptr_142 = new LoadInst(ptr_v_addr, "", false, label_entry_131);
  ptr_142->setAlignment(8);
  GetElementPtrInst* ptr_arrayidx2 = GetElementPtrInst::Create(ptr_142, int64_idxprom1, "arrayidx2", label_entry_131);
  LoadInst* int32_143 = new LoadInst(ptr_arrayidx2, "", false, label_entry_131);
  int32_143->setAlignment(4);
  LoadInst* int32_144 = new LoadInst(ptr_i_addr, "", false, label_entry_131);
  int32_144->setAlignment(4);
  CastInst* int64_idxprom3_145 = new SExtInst(int32_144, IntegerType::get(mod->getContext(), 64), "idxprom3", label_entry_131);
  LoadInst* ptr_146 = new LoadInst(ptr_v_addr, "", false, label_entry_131);
  ptr_146->setAlignment(8);
  GetElementPtrInst* ptr_arrayidx4_147 = GetElementPtrInst::Create(ptr_146, int64_idxprom3_145, "arrayidx4", label_entry_131);
  StoreInst* void_148 = new StoreInst(int32_143, ptr_arrayidx4_147, false, label_entry_131);
  void_148->setAlignment(4);
  LoadInst* int32_149 = new LoadInst(ptr_temp, "", false, label_entry_131);
  int32_149->setAlignment(4);
  LoadInst* int32_150 = new LoadInst(ptr_j_addr, "", false, label_entry_131);
  int32_150->setAlignment(4);
  CastInst* int64_idxprom5 = new SExtInst(int32_150, IntegerType::get(mod->getContext(), 64), "idxprom5", label_entry_131);
  LoadInst* ptr_151 = new LoadInst(ptr_v_addr, "", false, label_entry_131);
  ptr_151->setAlignment(8);
  GetElementPtrInst* ptr_arrayidx6 = GetElementPtrInst::Create(ptr_151, int64_idxprom5, "arrayidx6", label_entry_131);
  StoreInst* void_152 = new StoreInst(int32_149, ptr_arrayidx6, false, label_entry_131);
  void_152->setAlignment(4);
  ReturnInst::Create(mod->getContext(), label_entry_131);
  
 }
 
 // Function: log_msg (func_log_msg)
 {
  Function::arg_iterator args = func_log_msg->arg_begin();
  Value* ptr_msg = args++;
  ptr_msg->setName("msg");
  
  BasicBlock* label_entry_154 = BasicBlock::Create(mod->getContext(), "entry",func_log_msg,0);
  
  // Block entry (label_entry_154)
  AllocaInst* ptr_msg_addr = new AllocaInst(PointerTy_10, "msg.addr", label_entry_154);
  ptr_msg_addr->setAlignment(8);
  StoreInst* void_155 = new StoreInst(ptr_msg, ptr_msg_addr, false, label_entry_154);
  void_155->setAlignment(8);
  LoadInst* ptr_156 = new LoadInst(gvar_ptr_stderr, "", false, label_entry_154);
  ptr_156->setAlignment(8);
  LoadInst* ptr_157 = new LoadInst(ptr_msg_addr, "", false, label_entry_154);
  ptr_157->setAlignment(8);
  std::vector<Value*> int32_call_158_params;
  int32_call_158_params.push_back(ptr_156);
  int32_call_158_params.push_back(const_ptr_45);
  int32_call_158_params.push_back(ptr_157);
  CallInst* int32_call_158 = CallInst::Create(func_fprintf, int32_call_158_params, "call", label_entry_154);
  int32_call_158->setCallingConv(CallingConv::C);
  int32_call_158->setTailCall(false);
  AttributeSet int32_call_158_PAL;
  int32_call_158->setAttributes(int32_call_158_PAL);
  
  ReturnInst::Create(mod->getContext(), label_entry_154);
  
 }
 
 // Function: log_call_count (func_log_call_count)
 {
  Function::arg_iterator args = func_log_call_count->arg_begin();
  Value* int32_cnt = args++;
  int32_cnt->setName("cnt");
  
  BasicBlock* label_entry_160 = BasicBlock::Create(mod->getContext(), "entry",func_log_call_count,0);
  
  // Block entry (label_entry_160)
  AllocaInst* ptr_cnt_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "cnt.addr", label_entry_160);
  ptr_cnt_addr->setAlignment(4);
  StoreInst* void_161 = new StoreInst(int32_cnt, ptr_cnt_addr, false, label_entry_160);
  void_161->setAlignment(4);
  LoadInst* ptr_162 = new LoadInst(gvar_ptr_stderr, "", false, label_entry_160);
  ptr_162->setAlignment(8);
  LoadInst* int32_163 = new LoadInst(ptr_cnt_addr, "", false, label_entry_160);
  int32_163->setAlignment(4);
  std::vector<Value*> int32_call_164_params;
  int32_call_164_params.push_back(ptr_162);
  int32_call_164_params.push_back(const_ptr_46);
  int32_call_164_params.push_back(int32_163);
  CallInst* int32_call_164 = CallInst::Create(func_fprintf, int32_call_164_params, "call", label_entry_160);
  int32_call_164->setCallingConv(CallingConv::C);
  int32_call_164->setTailCall(false);
  AttributeSet int32_call_164_PAL;
  int32_call_164->setAttributes(int32_call_164_PAL);
  
  ReturnInst::Create(mod->getContext(), label_entry_160);
  
 }
 
 return mod;
}
